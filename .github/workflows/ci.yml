---
name: CI
"on":
  push:
  pull_request:
  workflow_dispatch:
  # Build master every Thursday at 7AM (schedule only applies to the master branch)
  schedule:
    - cron: "0 7 * * 4"

defaults:
 run:
  working-directory: ./traefik_auth_proxy

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          path: traefik_auth_proxy  # Check out to where Ansible expects to find it
      - name: Setup Python 3
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Append GitHub Actions system path
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install lint dependencies.
        run: pip3 install ansible ansible-lint yamllint
      - name: Lint code.
        run: |
            yamllint .
            # Ignore role name when linting
            ansible-lint -x 'role-name'
  test-molecule:
    name: Test with Molecule
    runs-on: ubuntu-latest
    env:
      PY_COLORS: '1'
      ANSIBLE_FORCE_COLOR: '1'
      MOLECULE_DISTRO: ubuntu2004
      RUN_TYPE: ci
      CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          path: traefik_auth_proxy  # Check out to where Ansible expects to find it
      - name: Setup Python 3
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install deps
        run: pip3 install ansible ansible-lint 'molecule>=5.0.1' molecule-plugins[docker] dnspython cloudflare

      - name: Create instances, prepare environment
        run: molecule create
      - name: Apply the role to the instance
        run: molecule converge
      - name: Check the role is idempotent
        run: molecule idempotence
      - name: Run tests
        run: molecule verify
      - name: Print containers and logs for debugging
        if: failure()
        run: |
          docker ps;
          docker logs traefik_auth_proxy_molecule_reverse-proxy_1;
          docker logs traefik_auth_proxy_molecule_forward-auth_1;
          date

      - name: Clean up instance
        if: always()
        run: molecule cleanup && molecule destroy

  build-config-generator:
    name: Build config-generator container
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker-only/config-generator/Dockerfile
          tags: local/traefik_auth_proxy_config_generator
          outputs: type=docker,dest=/tmp/config-generator.tar
      -
        name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: config-generator
          path: /tmp/config-generator.tar
          retention-days: 1


  test-dockeronly:
    name: Test Docker Only Mode
    runs-on: ubuntu-latest
    env:
      PY_COLORS: '1'
      ANSIBLE_FORCE_COLOR: '1'
      RUN_TYPE: ci-do
      CLOUDFLARE_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_TOKEN }}
      BASE_DOMAIN: tap-ci.samdbmg.uk
      CONFIG_GENERATOR_DOCKER_IMAGE: local/traefik_auth_proxy_config_generator
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build the config-generator container
        run: docker buildx build --load -t ${CONFIG_GENERATOR_DOCKER_IMAGE} -f docker-only/config-generator/Dockerfile .

      # Set up to run the tests
      - name: Setup Python 3
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
        id: setup-python

      - name: Install deps
        run: pip3 install ansible docker docker-compose

      - name: Resolve mock OIDC server to localhost
        run: echo "127.0.0.1 mock-oidc" | sudo tee -a /etc/hosts

      - name: Run test playbook
        run: ansible-playbook -i tests/inventory tests/test.yml --skip-tags cleanup -e ansible_python_interpreter='${{ steps.setup-python.outputs.python-path }}'
        working-directory: ./docker-only

      - name: Print proxy logs for debugging
        if: failure()
        run: |
          docker ps
          docker-compose -p traefik_auth_proxy_compose logs
        working-directory: ./docker-only

      - name: Clean up afterwards
        if: always()
        run: ansible-playbook -i tests/inventory tests/test.yml --tags facts,cleanup -e ansible_python_interpreter='${{ steps.setup-python.outputs.python-path }}'
        working-directory: ./docker-only
